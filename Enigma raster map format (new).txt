Mapmaker 2 file format 
======================

Map files 
=========

Each map file covers a fixed size in degrees. The file name indexes the top left corner of the 
files coverage. The size is 8x8 degrees and coverage starts from 0 degrees North /180 degrees west. 

The westernmost map file has a name of W180N00, the file that covers the area immediately 
to the east of this is W172N00 and the file that covers the area immediately to the south is 
W180N82. 

From west 180 to east 180 – each row of map files would contain a maximum of 45 files. 
From north to south – each column would have 23 possible files. The southernmost row 
would only contain the final 4 degrees of latitude (86 to 90 degrees South). 

File names have the default file extension of '.MAP'. However, maps could also have other file 
extensions such as '.VFR', '.IFR' and others to allow use of multiple map types in a system at 
the same time. 

Each map file contains maps for 5 zoom levels. Each zoom level provides a different number 
of pixels for a given area. This allows the map creation with different levels of pixel processing 
and blending or even different resolution source maps as is most appropriate for a given map 
type. 

Maps are split into tiles. Each tile covers a given geographic region at a given number of 
pixels depending on zoom level. 

Each map file is a collection of tiles for each zoom level. 

Each tile is a standard image file in GIF format. The map creation program produces these 
tiles and then merges these into a final map file. 

For each zoom level: 

Zoom level 4 (lowest resolution): Each tile covers 4x4 degrees. 
Zoom level 3: Each tile covers 2x2 degrees. 
Zoom level 2: Each tile covers 1x1 degrees. 
Zoom level 1: Each tile covers 0.5x0.5 degrees. 
Zoom level 0 (Highest resolution): Each tile covers 0.25x0.25 degrees. 

The height of each tile is 600 pixels. This is fixed and unvarying. 
The width of each tile is variable and depends on the latitude. The tile is always rectangular. 
Any correction which may be required when stitching tiles together is left to the viewing 
application (this typically entails duplicating or removing pixels in each row in order to obtain a 
corrected display if a larger number of tiles (latitude) are to be displayed. 


Tile width tables 
=================

The following tables should be used to obtain the tile width depending on latitude where 
the width starts at the tile row at the North pole and ends with the row at the South pole. 
The EFIS viewing application will use these widths so please ensure that the tile generating 
platform also uses these widths to avoid gaps or overlaps. 

TileWidth4: array[0..44] of word = ( 20,62,104,145,185,224,263,300,335,369,401,431,459,485,508,529,548,563,576,586,594,
598,599,598,594,586,576,563,548,529,508,485,459,431,401,369,335,299,263,224,185,145, 104,62,20); 

TileWidth3: array[0..89] of word = ( 10,31,52,73,93,114,134,155,175,195,215,234,253,272,290,309,326,344,361,377,393,409,
424,438,452,466,479,491,503,514,524,534,543,552,560,567,573,579,584,588,592,595,597, 599,599,599,599,597,595,592,588,584,
579,573,567,560,552,543,534,524,514,503,491,479, 466,452,438,424,409,393,377,361,344,326,309,290,272,253,234,215,195,175,
155,134,114, 93,73,52,31,10); 

TileWidth2: array[0..179] of word = ( 5,15,26,36,47,57,67,78,88,99,109,119,129,140,150,160,170,180,190,200,210,219,229,
239,248,258,267,277,286,295,304,313,322,331,339,348,356,365,373,381,389,397,405,413, 420,427,435,442,449,456,462,469,476,
482,488,494,500,506,511,516,522,527,532,536,541, 545,550,554,558,562,565,568,572,575,578,580,583,585,587,589,591,593,594,
596,597,598, 598,599,599,599,599,599,599,598,598,597,596,594,593,591,589,587,585,583,580,578,575, 572,568,565,562,558,554,
550,545,541,536,532,527,522,516,511,506,500,494,488,482,476, 469,462,456,449,442,435,427,420,413,405,397,389,381,373,365,
356,348,339,331,322,313, 304,295,286,277,267,258,248,239,229,219,210,200,190,180,170,160,150,140,129,119,109, 99,88,78,67,
57,47,36,26,15,5); 

TileWidth1: array[0..359] of word = ( 2,7,13,18,23,28,34,39,44,49,54,60,65,70,75,80,86,91,96,101,106,111,117,122,127,132,
137,142,147,152,157,162,167,172,177,182,187,192,197,202,207,212,217,222,227,232,236, 241,246,251,255,260,265,270,274,279,
283,288,293,297,302,306,311,315,320,324,328,333, 337,341,346,350,354,358,363,367,371,375,379,383,387,391,395,399,403,407,
411,414,418, 422,426,429,433,437,440,444,447,451,454,457,461,464,467,471,474,477,480,483,486,489, 492,495,498,501,504,507,
510,512,515,518,520,523,526,528,530,533,535,538,540,542,544, 547,549,551,553,555,557,559,561,562,564,566,568,569,571,573,
574,576,577,578,580,581, 582,584,585,586,587,588,589,590,591,592,593,593,594,595,595,596,596,597,597,598,598, 599,599,599,
599,599,599,599,599,599,599,599,599,599,599,598,598,597,597,596,596,595, 595,594,593,593,592,591,590,589,588,587,586,585,
584,582,581,580,578,577,576,574,573, 571,569,568,566,564,562,561,559,557,555,553,551,549,547,544,542,540,538,535,533,530,
528,526,523,520,518,515,512,510,507,504,501,498,495,492,489,486,483,480,477,474,471, 467,464,461,457,454,451,447,444,440,
437,433,429,426,422,418,414,411,407,403,399,395, 391,387,383,379,375,371,367,363,358,354,350,346,341,337,333,328,324,320,
315,311,306, 302,297,293,288,283,279,274,270,265,260,255,251,246,241,236,232,227,222,217,212,207, 202,197,192,187,182,177,
172,167,162,157,152,147,142,137,132,127,122,117,111,106,101, 96,91,86,80,75,70,65,60,54,49,44,39,34,28,23,18,13,7,2); 

TileWidth0: array[0..719] of word = ( 1,3,6,9,11,14,17,19,22,24,27,30,32,35,37,40,43,45,48,50,53,56,58,61,64,66,69,71,74,
77,79,82,84,87,89,92,95,97,100,102,105,108,110,113,115,118,120,123,126,128,131,133, 136,138,141,143,146,148,151,154,156,159,
161,164,166,169,171,174,176,179,181,184,186, 189,191,194,196,199,201,203,206,208,211,213,216,218,221,223,225,228,230,233,235,
238, 240,242,245,247,250,252,254,257,259,261,264,266,268,271,273,275,278,280,282,285,287, 289,292,294,296,298,301,303,305,
307,310,312,314,316,319,321,323,325,327,330,332,334, 336,338,340,343,345,347,349,351,353,355,357,360,362,364,366,368,370,372,
374,376,378, 380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,413,415,417,419, 421,423,425,427,428,430,
432,434,436,437,439,441,443,445,446,448,450,451,453,455,457, 458,460,462,463,465,467,468,470,471,473,475,476,478,479,481,483,
484,486,487,489,490, 492,493,495,496,498,499,501,502,503,505,506,508,509,510,512,513,514,516,517,518,520, 521,522,524,525,526,
527,529,530,531,532,534,535,536,537,538,539,540,542,543,544,545, 546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,
561,562,563,564,565,566, 566,567,568,569,570,571,571,572,573,574,574,575,576,577,577,578,579,579,580,581,581, 582,583,583,584,
584,585,586,586,587,587,588,588,589,589,590,590,591,591,591,592,592, 593,593,593,594,594,595,595,595,595,596,596,596,597,597,
597,597,598,598,598,598,598, 598,599,599,599,599,599,599,599,599,599,599,599,599,599,599,599,599,599,599,599,599, 599,599,599,
599,599,599,598,598,598,598,598,598,597,597,597,597,596,596,596,595,595, 595,595,594,594,593,593,593,592,592,591,591,591,590,
590,589,589,588,588,587,587,586, 586,585,584,584,583,583,582,581,581,580,579,579,578,577,577,576,575,574,574,573,572, 571,571,
570,569,568,567,566,566,565,564,563,562,561,560,559,558,557,556,555,554,553, 552,551,550,549,548,547,546,545,544,543,542,540
,539,538,537,536,535,534,532,531,530, 529,527,526,525,524,522,521,520,518,517,516,514,513,512,510,509,508,506,505,503,502,
501,499,498,496,495,493,492,490,489,487,486,484,483,481,479,478,476,475,473,471,470, 468,467,465,463,462,460,458,457,455,453
,451,450,448,446,445,443,441,439,437,436,434, 432,430,428,427,425,423,421,419,417,415,413,412,410,408,406,404,402,400,398,396,
394, 392,390,388,386,384,382,380,378,376,374,372,370,368,366,364,362,360,357,355,353,351, 349,347,345,343,340,338,336,334,332,
330,327,325,323,321,319,316,314,312,310,307,305, 303,301,298,296,294,292,289,287,285,282,280,278,275,273,271,268,266,264,261,
259,257, 254,252,250,247,245,242,240,238,235,233,230,228,225,223,221,218,216,213,211,208,206, 203,201,199,196,194,191,189,186,
184,181,179,176,174,171,169,166,164,161,159,156,154, 151,148,146,143,141,138,136,133,131,128,126,123,120,118,115,113,110,108,
105,102,100, 97,95,92,89,87,84,82,79,77,74,71,69,66,64,61,58,56,53,50,48,45,43,40,37,35,32,30, 27,24,22,19,17,14,11,9,6,3,1); 

Map file structure. 
===================

The map file structure is simple. 

The first seven bytes contain the text “MGLRMAP”. 
This is followed by a single byte that states the file version. This byte is currently set to 0x01. 
This is followed by two lines of text in Pascal “shortstring” format. Each line is 65 bytes in size. 
The first byte is the length of the text followed by 64 bytes to contain the text. 
These two lines can be used to identify the map creator or contain other useful information to 
the end user. 
This is followed by a block of 128 bytes that must be set to 0x00. This area is used to contain 
encryption information that the EFIS can use to read the following map information. For open, 
unencrypted files this area must be filled with 0x00. 

Following this is a set of 1024 4 byte pointers, i.e. 4096 bytes, to the highest resolution tiles (32 x 32 tiles). 
Following this is a set of 256 4 byte pointers, i.e. 1025 bytes, (16x16 tiles). 
Following this is a set of 64 4 byte pointers, i.e. 256 bytes, (8x8 tiles) 
Following this is a set of 16 4 byte pointers, i.e. 64 bytes, (4x4 tiles) 
Following this is a set of 4 4 byte pointers, i.e. 16 bytes, to the lowest resolution tiles (2 x 2 tiles) 
This is followed immediately by the tiles. 

Tiles are stored in GIF87a file format. Immediately before each GIF tile are 5 bytes, of which 4 bytes are the length of 
the GIF data (little endian), followed by the fixed value 0x01, signifying that the following image stream is in GIF87a 
format. Other image formats are currently not implemented. Each tile is the complete GIF file including all GIF header 
information and a color palette for that tile. 

Each pointer points to the byte location in the file where the length of the GIF is encoded, 
i.e. 5 bytes before the GIF file for that entry starts (minus map file header). 
The pointers are stored little endian (i.e. low byte first) and count from the beginning of the file. 

The pointers are arranged in rows starting at the northernmost row so the first pointer points 
to the GIF file that covers the area at the top left of the map file coverage. The order is left to 
right and then down one row and repeat. 

Adjacent tiles are normally stored in ascending order in the Map file following the order of the 
pointers. This is not strictly required as the pointers allow complete random positioning of 
each tile within the map file. However, it normally results in better file access performance if 
the next tile that would be read follows the current tile in the map file. 


Empty tiles 
If a tile for a given location should be empty, insert a zero value pointer for that tile. You can also 
consider making a “special” GIF image for that tile perhaps with the text “No map for this area” for example. 

Omitting level 0 zoom tiles 
It is possible to omit level 0 (highest resolution) tiles in cases where this resolution would not 
significantly enhance the image quality or it is desirable to reduce the file size of the map file. 
Level 0 tends to use a lot of storage space. The EFIS will create a virtual level 0 if it does not 
have a corresponding level 0 tile but can find a tile for level 1 that covers the area (a level 1 
tile would cover 4 x the area of a level 0 tile so a level 0 tile would always be fully contained in 
the level 1 tile of the same area). The EFIS will duplicate every pixel horizontally and then duplicate 
this for every row of the image to create the desired virtual level 0 – with loss of image quality as 
effective resolution is less. To omit a level 0 tile, simply allocate a pointer value of 0x0 for that tile. 

Notes on the GIF file format 
The GIF file format contains a raster image with 8 bits per pixel indexing a color look-up table. 
The raster image is compressed using a loss-less compression technique. 
This lends itself well to maps but actual image quality is determined by how well the source images colors 
are translated/reduced to the available 256. In addition, the source image needs to be re-sampled to the 
available pixels in the target tile. The method and quality of the sampling has a major impact on the quality 
of the final image so this needs to be evaluated carefully and the correct method has to be chosen. 
In general, the best results are obtained if the resolution of the source image is fairly close to the resolution 
of the target tile. This preserves detail such as small writing. Going from a low resolution source to a high 
resolution target means almost no degrading of the image. For this reason, if possible, one can consider using 
source maps at suitable resolutions for the various source levels. For example, in many cases aviation charts are 
available in 1:500.000 and 1:1000.000 or similar resolution steps which could be allocated to the zoom levels for best effect. 
The GIF file format was under patent dispute until 2004 when the relevant patent held for the compression technique expired. 
The GIF file format has been chosen for the map file due to its good compression ratio, loss less compression (excepting 
possible loss of number of colors) and fast decompression which is of importance in an EFIS system. 


